<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Articles on Nodecafe</title>
    <link>https://yyydao.github.io/posts/</link>
    <description>Recent content in Articles on Nodecafe</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 02 Mar 2018 12:00:00 -0500</lastBuildDate>
    
	<atom:link href="https://yyydao.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Debounce Throttle and More</title>
      <link>https://yyydao.github.io/posts/debounce-throttle-and-more/</link>
      <pubDate>Mon, 26 Mar 2018 23:38:52 +0800</pubDate>
      
      <guid>https://yyydao.github.io/posts/debounce-throttle-and-more/</guid>
      <description>&lt;p&gt;Debounce和Throttle是两种常用的JS技巧，同时也是非常实用的技术。 所以有大量的文章专门介绍，包括不少洗稿了CSS-Trick那篇文章，尤其是那些用电梯做比喻的文章，不得不说，电梯的比喻烂透了。&lt;/p&gt;

&lt;p&gt;简单来说，debounce在计算机词典中译作防反跳，其他常见翻译是防抖动，由词根 &lt;code&gt;de-&lt;/code&gt; 和 &lt;code&gt;bounce&lt;/code&gt; 组成，具体详解见下文。throttle可译作节流，那些写成截流的，估计是用了拼音输入法并且没理解throttle含义，截流的英文通常译作closure，截流原指堵截水流，使改变方向或提高水位，所以叫截流根本是牛头不对马嘴；而节流本意是节制水流，比喻节约开支。其实想想成语开源节流或者节流阀门，就明白了。&lt;/p&gt;

&lt;p&gt;这两个从字面来看，似乎能得到些感性上的大致理解。下面，细说一下这两个技巧。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Let&#39;s Encrypt 部署</title>
      <link>https://yyydao.github.io/posts/lets-encrypt/</link>
      <pubDate>Sun, 25 Mar 2018 12:16:12 +0800</pubDate>
      
      <guid>https://yyydao.github.io/posts/lets-encrypt/</guid>
      <description>&lt;p&gt;Let&amp;rsquo;s Encrypt 最近支持wildcard，顺便自己之前vps的东西也铲掉重来，所以这里是一篇再次部署Let&amp;rsquo;s encrypt证书的文章。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>mac全栈开发环境</title>
      <link>https://yyydao.github.io/posts/mac-full-stack-env/</link>
      <pubDate>Fri, 23 Mar 2018 10:44:05 +0800</pubDate>
      
      <guid>https://yyydao.github.io/posts/mac-full-stack-env/</guid>
      <description>&lt;p&gt;最近Mac由于磁盘空间被用完导致开不了机，天才吧排队又久，TimeMachine 恢复系统后，居然进不去系统。
无奈之下只能选择重装系统。这就意味着之前整好的开发环境要全部重新再折腾一次。&lt;/p&gt;

&lt;p&gt;此文作为本次重装的一次记录，一是为了方便自己，也希望能方便他人。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title></title>
      <link>https://yyydao.github.io/posts/whatwg-event-loop/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://yyydao.github.io/posts/whatwg-event-loop/</guid>
      <description>Event Loop 定义 为了协调事件，用户交互，脚本，渲染，网络等，用户代理必须使用本文所述的事件循环。有两种事件循环：用于浏览上下文(browsing contexts)和Worker。
每个用户代理必须至少有一个浏览上下文事件循环，并且至多有一个unit of related similar-origin browsing contexts（没查到中文这叫啥，字面我自行翻译成相似来源相关浏览上下文单元，该概念可以看这里）。
 对于有多个相关浏览上下文单元事件循环的情况，当该组中的浏览上下文被导航，从一个相关的相似来源浏览上下文单元切换到另一个单元时，复杂性会出现。 本规范目前没有描述如何处理这些复杂问题。
 浏览上下文事件循环始终至少有一个浏览上下文。如果这样的事件循环的浏览上下文全部消失，那么事件循环也会消失。浏览上下文总是有一个事件循环来协调其活动。
Worker事件循环更简单：每个Worker都有一个事件循环，通过Worker处理模型 ( worker processing model )管理事件循环的生命周期。
事件循环具有一个或多个任务队列 ( task queue )。任务队列是一个有序的任务列表，它是负责如下工作的算法：
 事件
在特定的EventTarget对象上分派Event对象，通常由专门的任务完成。
   并非所有事件都使用任务队列分派，其他许多事件都会在其他任务中分派。
  Parsing  HTML解析器token一个或多个字节，然后处理任何结果令牌，这个过程一般视为一个任务。
 Callbacks  调用回调通常由指定任务完成。
 Using a resource  当算法获取资源时，如果以非阻塞方式进行提取，那么一旦某个或全部资源可用，对资源的处理由任务执行。
 对DOM操作作出反应  某些元素具有响应DOM操作而触发的任务，例如，当该元素插入到文档中时。
浏览上下文类型的事件循环中的每一个任务都与一个Document对象关联；如果任务的队列在一个元素的上下文中，那么它是元素的节点文档；如果任务队列在浏览上下文中，那么它是任务排队时的浏览上下文活动文档；如果任务是因为script脚本产生的队列，那么该文档对象是由该（script&amp;rsquo;s settings object）产生的（A responsible document）
 A responsible document: For example, the URL of the responsible document is used to set the URL of the Document after it has been reset using document.</description>
    </item>
    
  </channel>
</rss>